FROM ubuntu:22.04

# install dependencies
RUN apt-get update
RUN apt-get upgrade -y

# install python
RUN apt-get install -y python3.10
RUN apt-get install -y python3-pip
RUN apt-get install -y python3.10-dev

ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1

# upgrade pip
RUN pip install --upgrade pip

# create the app directory
RUN mkdir /home/app

# set the working directory
WORKDIR /home/app

# copy requirements to the container
COPY ./requirements.txt ./requirements.txt

# install requirements
RUN pip install -q -r requirements.txt

# copy the content of the local src directory to the working directory
COPY ./webapp /home/app/webapp

# # install postgresql
# ENV DEBIAN_FRONTEND noninteractive
# RUN apt-get update && apt-get install -y postgresql
# # ENV POSTGRES_PASSWORD=postgres
# # ENV POSTGRES_USER=postgres
# # ENV POSTGRES_DB=postgres

# # Configurar la base de datos
# USER postgres
# RUN /etc/init.d/postgresql start && \
#     psql --command "CREATE USER docker WITH SUPERUSER PASSWORD 'docker';" && \
#     createdb -O docker docker

# # Configurar PostgreSQL para permitir conexiones remotas
# RUN echo "host all all 0.0.0.0/0 md5" >> /etc/postgresql/*/main/pg_hba.conf && \
#     echo "listen_addresses='*'" >> /etc/postgresql/*/main/postgresql.conf

# # Exponer el puerto 5432 para que pueda conectarse desde fuera del contenedor
# EXPOSE 5432

# # Ejecutar PostgreSQL
# # CMD ["/usr/lib/postgresql/13/bin/postgres", "-D", "/var/lib/postgresql/13/main", "-c", "config_file=/etc/postgresql/13/main/postgresql.conf"]

# command to run on container : docker build -t database .
# command to run on container : docker run -it --name database -p 5433:5432 --network dev_net database







# install git
# RUN apt-get install -y git


# RUN apt-get install -y python3.10-venv
# RUN apt-get install -y software-properties-common



#####################################################################################################################
FROM postgres:latest
RUN apt-get update
RUN apt-get upgrade -y 
RUN apt-get install -y --no-install-recommends \
    build-essential \
    python3 \
    python3-dev \
    python3-pip \
    python3-setuptools \
    python3-tk \
    python3-wheel 

RUN pip3 install --upgrade pip
ENV POSTGRES_PASSWORD=postgres
ENV POSTGRES_USER=postgres
ENV POSTGRES_DB=postgres
EXPOSE 5432
EXPOSE 8001

ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1


# create the app directory
RUN mkdir /home/app

# set the working directory
WORKDIR /home/app

# copy requirements to the container
COPY ./requirements.txt ./requirements.txt

# install requirements
RUN pip install -q -r requirements.txt

# copy the content of the local src directory to the working directory
COPY ./webapp /home/app/webapp

CMD ["postgres"]
######################################################################################################################
######################################################################################################################
######################################################################################################################
FROM ubuntu:latest
ENV DEBIAN_FRONTEND noninteractive
RUN apt-get update
RUN apt-get upgrade -y
RUN apt-get install -y postgresql
RUN apt-get install -y postgresql-contrib
RUN apt-get install -y python3 python3-pip
RUN apt-get install -y python3-setuptools
RUN apt-get install -y python3-tk
RUN apt-get install -y python3-wheel
RUN pip3 install Django
RUN pip3 install psycopg2-binary
RUN pip3 install postgrest
RUN mkdir /home/app
WORKDIR /home/app
COPY requirements.txt /home/app
RUN pip3 install -r requirements.txt
COPY /app/ /home/app/

USER postgres
RUN /etc/init.d/postgresql start &&\
    psql -U postgres -c "ALTER USER postgres PASSWORD 'postgres';" &&\
    # /etc/init.d/postgresql stop

CMD ["python3", "manage.py", "runserver", "0.0.0.0:8000"]

# # Configurar PostgreSQL para permitir conexiones remotas
# RUN echo "host all all 0.0.0.0/0 md5" >> /etc/postgresql/14/main/pg_hba.conf && \
#     echo "listen_addresses='*'" >> /etc/postgresql/14/main/postgresql.conf

# CMD ["python3", "manage.py", "runserver", "0.0.0.0:8000"]




# docker run -it -p 8000:8000 testing # crea un contendor desde la imagen testing
# docker exec -it compassionate_sutherland bash # entra al contenedor creado, llamado compassionate_sutherland
# psql --version # verifica que postgresql este instalado
# /etc/init.d/postgresql status # verifica que postgresql este corriendo
# SELECT usename FROM pg_user; # lista los usuarios de postgres
# SELECT datname FROM pg_database; # lista las bases de datos de postgres


FROM python:3.9

# Establece el directorio de trabajo en /home/app
WORKDIR /home/app

# Copia el archivo requirements.txt al contenedor
COPY requirements.txt .

# Instala las dependencias necesarias
RUN pip install -r requirements.txt

# Cambia los permisos de la carpeta /home/app para que el usuario 'app' tenga acceso de escritura
RUN chown -R app /home/app && chmod -R 755 /home/app

# Establece el usuario 'app' como usuario por defecto para ejecutar los comandos dentro del contenedor
USER app

# Copia el resto de los archivos de la aplicación al contenedor
COPY . .

# Inicia el servidor de la aplicación
CMD ["python", "manage.py", "runserver", "0.0.0.0:8000"]

